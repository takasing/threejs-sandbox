/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import React, { useEffect } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { GLTF } from 'three/examples/jsm/loaders/GLTFLoader'

type GLTFResult = GLTF & {
  nodes: {
    FootL_1: THREE.Mesh
    LowerLegL_1: THREE.Mesh
    LegL: THREE.Mesh
    LowerLegR_1: THREE.Mesh
    LegR: THREE.Mesh
    Head_2: THREE.Mesh
    Head_3: THREE.Mesh
    Head_4: THREE.Mesh
    ArmL: THREE.Mesh
    ShoulderL_1: THREE.Mesh
    ArmR: THREE.Mesh
    ShoulderR_1: THREE.Mesh
    Torso_2: THREE.Mesh
    Torso_3: THREE.Mesh
    FootR_1: THREE.Mesh
    HandR_1: THREE.SkinnedMesh
    HandR_2: THREE.SkinnedMesh
    HandL_1: THREE.SkinnedMesh
    HandL_2: THREE.SkinnedMesh
    Bone: THREE.Bone
  }
  materials: {
    Grey: THREE.MeshStandardMaterial
    Main: THREE.MeshStandardMaterial
    Black: THREE.MeshStandardMaterial
  }
}

export type ActionName =
  | 'Dance'
  | 'Death'
  | 'Idle'
  | 'Jump'
  | 'No'
  | 'Punch'
  | 'Running'
  | 'Sitting'
  | 'Standing'
  | 'ThumbsUp'
  | 'Walking'
  | 'WalkJump'
  | 'Wave'
  | 'Yes'
// type GLTFActions = Record<ActionName, THREE.AnimationAction>

export default function RobotExpressive(
  props: JSX.IntrinsicElements['group'] & { action?: ActionName }
) {
  // const group = useRef<THREE.Group>()
  const { nodes, materials, animations } = useGLTF(
    '/gltf/RobotExpressive.glb'
  ) as GLTFResult
  // console.log(nodes, materials, animations)

  //   Type 'GLTFActions' is missing the following properties from type 'AnimationClip': name, tracks, blendMode, duration, and 8 more.ts(2344)
  // const { actions } = useAnimations<GLTFActions>(animations, group)
  const { ref, actions } = useAnimations(animations)
  const { action } = props
  useEffect(() => {
    action && actions[action].play()
  }, [action])

  return (
    <group ref={ref} {...props} dispose={null}>
      <group name="Root_Scene">
        <group name="RootNode">
          <group
            name="RobotArmature"
            rotation={[-Math.PI / 2, 0, 0]}
            scale={100}
          >
            <primitive object={nodes.Bone} />
          </group>
          <group
            name="HandR"
            position={[0, 2.37, -0.02]}
            rotation={[-Math.PI / 2, 0, 0]}
            scale={100}
          >
            <skinnedMesh
              name="HandR_1"
              geometry={nodes.HandR_1.geometry}
              material={nodes.HandR_1.material}
              skeleton={nodes.HandR_1.skeleton}
            />
            <skinnedMesh
              name="HandR_2"
              geometry={nodes.HandR_2.geometry}
              material={nodes.HandR_2.material}
              skeleton={nodes.HandR_2.skeleton}
            />
          </group>
          <group
            name="HandL"
            position={[0, 2.37, -0.02]}
            rotation={[-Math.PI / 2, 0, 0]}
            scale={100}
          >
            <skinnedMesh
              name="HandL_1"
              geometry={nodes.HandL_1.geometry}
              material={nodes.HandL_1.material}
              skeleton={nodes.HandL_1.skeleton}
            />
            <skinnedMesh
              name="HandL_2"
              geometry={nodes.HandL_2.geometry}
              material={nodes.HandL_2.material}
              skeleton={nodes.HandL_2.skeleton}
            />
          </group>
        </group>
      </group>
      <mesh
        geometry={nodes.Head_2.geometry} // なぜかHeadではなく体が緑になる
        material={materials.Main}
        material-color="green"
      />
    </group>
  )
}

useGLTF.preload('/gltf/RobotExpressive.glb')
